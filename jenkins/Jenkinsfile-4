def checkSeverity(value, maxSeverityValue, severity) {
    try {
        int intValue = Integer.parseInt(value)
        return intValue < maxSeverityValue
    } catch (NumberFormatException e) {
        // Handle the case where the value is not a valid integer
        return false
    }
}
pipeline {
    agent {
        label 'worker-02'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', 
                url: 'https://github.com/Narendrakaduru/hello-app.git'
            }
        }
        stage('Maven Build'){
            steps{
                sh '''
                mvn clean install
                '''
            }
        }
        stage('Docker Build') {
            steps {
                sh '''
                    cd ${WORKSPACE}
                    docker build -t hello-app-img .
                '''
            }
        }
        stage('Trivy Scan') {
            steps {
                sh 'trivy image hello-app-img > ${WORKSPACE}/res.txt'
            }
        }
        stage('Trivy Build Breaker') {
            steps {
                script {
                    def MaxCriticalValue = 2
                    def MaxHighValue = 5
                    def MaxMediumValue = 5
                    def MaxLowValue = 5
                    def MaxTotalValue = 10

                    // Run the awk command and capture its output for CRITICAL, HIGH, MEDIUM, LOW, and TOTAL
                    def criticalValue = sh(script: 'awk \'/CRITICAL:/ {gsub("[^0-9]", "", $12); if (++count == 2) {print $12; exit}}\' ${WORKSPACE}/res.txt', returnStdout: true).trim()
                    def highValue = sh(script: 'awk \'/HIGH:/ {gsub("[^0-9]", "", $10); if (++count == 2) {print $10; exit}}\' ${WORKSPACE}/res.txt', returnStdout: true).trim()
                    def mediumValue = sh(script: 'awk \'/MEDIUM:/ {gsub("[^0-9]", "", $8); if (++count == 2) {print $8; exit}}\' ${WORKSPACE}/res.txt', returnStdout: true).trim()
                    def lowValue = sh(script: 'awk \'/LOW:/ {gsub("[^0-9]", "", $6); if (++count == 2) {print $6; exit}}\' ${WORKSPACE}/res.txt', returnStdout: true).trim()
                    def totalValue = sh(script: 'awk \'/Total:/ {gsub("[^0-9]", "", $2); if (++count == 2) {print $2; exit}}\' ${WORKSPACE}/res.txt', returnStdout: true).trim()

                    // Print the obtained values for verification
                    echo "CRITICAL Value: ${criticalValue}"
                    echo "HIGH Value: ${highValue}"
                    echo "MEDIUM Value: ${mediumValue}"
                    echo "LOW Value: ${lowValue}"
                    echo "TOTAL Value: ${totalValue}"

                    // Call function to check severity values
                    if (checkSeverity(criticalValue, MaxCriticalValue, 'CRITICAL')) {
                        echo "CRITICAL value is within limits."
                    } else {
                        error "CRITICAL value is greater than ${MaxCriticalValue}."
                    }

                    if (checkSeverity(highValue, MaxHighValue, 'HIGH')) {
                        echo "HIGH value is within limits."
                    } else {
                        error "HIGH value is greater than ${MaxHighValue}."
                    }

                    if (checkSeverity(mediumValue, MaxMediumValue, 'MEDIUM')) {
                        echo "MEDIUM value is within limits."
                    } else {
                        error "MEDIUM value is greater than ${MaxMediumValue}."
                    }

                    if (checkSeverity(lowValue, MaxLowValue, 'LOW')) {
                        echo "LOW value is within limits."
                    } else {
                        error "LOW value is greater than ${MaxLowValue}."
                    }

                    if (checkSeverity(totalValue, MaxTotalValue, 'TOTAL')) {
                        echo "TOTAL value is within limits."
                    } else {
                        error "TOTAL value is greater than ${MaxTotalValue}."
                    }
                }
            }
        }
        stage('Docker Deploy to Container') {
            steps {
                sh '''
                    cd ${WORKSPACE}
                    docker stop hello-app || true
                    docker rm hello-app || true
                    docker run -d -p 6701:6701 --name hello-app hello-app-img
                '''
            }
        }
    }
    tools {
        maven 'M2_HOME'
    }
}
